#!/usr/bin/env python3
"""
Script principal para ejecutar el proceso de evaluaci√≥n de candidatos con logging completo
"""

import os
import sys
import json
from datetime import datetime
from crew import create_data_processing_crew
from utils.logger import evaluation_logger

def main():
    """Funci√≥n principal que ejecuta todo el proceso de evaluaci√≥n"""
    try:
        print("="*80)
        print("üöÄ SISTEMA DE EVALUACI√ìN DE CANDIDATOS")
        print("="*80)
        
        # Inicializar logging
        start_time = datetime.now()
        evaluation_logger.logger.info("="*80)
        evaluation_logger.logger.info("üöÄ INICIANDO PROCESO DE EVALUACI√ìN DE CANDIDATOS")
        evaluation_logger.logger.info(f"‚è∞ Fecha y hora de inicio: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
        evaluation_logger.logger.info("="*80)
        
        # Verificar variables de entorno
        required_env_vars = ['SUPABASE_URL', 'SUPABASE_KEY', 'OPENAI_API_KEY']
        missing_vars = [var for var in required_env_vars if not os.getenv(var)]
        
        if missing_vars:
            evaluation_logger.log_error("Configuraci√≥n", f"Variables de entorno faltantes: {missing_vars}")
            print(f"‚ùå Error: Variables de entorno faltantes: {missing_vars}")
            return
        
        evaluation_logger.log_task_progress("Configuraci√≥n", "Variables de entorno verificadas correctamente")
        
        # Crear y ejecutar crew
        evaluation_logger.log_task_start("Proceso Principal", "Crew Manager")
        crew = create_data_processing_crew()
        
        print("\nüìä Ejecutando an√°lisis de candidatos...")
        print("   - Extrayendo datos de Supabase")
        print("   - Analizando conversaciones")
        print("   - Evaluando job descriptions")
        print("   - Generando comparaciones")
        print("   - Procesando reportes finales")
        print("   - Enviando resultados por email")
        print("\n‚è≥ Este proceso puede tomar varios minutos...\n")
        
        # Ejecutar el crew
        result = crew.kickoff()
        
        # Guardar resultados localmente tambi√©n
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"conversation_results_{timestamp}.json"
        
        try:
            result_json = json.loads(str(result))
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result_json, f, indent=2, ensure_ascii=False)
        except json.JSONDecodeError:
            with open(filename.replace('.json', '.txt'), 'w', encoding='utf-8') as f:
                f.write(str(result))
            filename = filename.replace('.json', '.txt')
        
        # Calcular tiempo de ejecuci√≥n
        end_time = datetime.now()
        execution_time = end_time - start_time
        
        # Log de finalizaci√≥n
        evaluation_logger.log_task_complete("Proceso Principal", f"Proceso completado en {execution_time}")
        evaluation_logger.logger.info("="*80)
        evaluation_logger.logger.info("‚úÖ PROCESO DE EVALUACI√ìN COMPLETADO EXITOSAMENTE")
        evaluation_logger.logger.info(f"‚è∞ Tiempo total de ejecuci√≥n: {execution_time}")
        evaluation_logger.logger.info(f"üìÅ Logs guardados en: {evaluation_logger.logs_dir}")
        evaluation_logger.logger.info(f"üìÑ Resultados guardados en: {filename}")
        evaluation_logger.logger.info("="*80)
        
        print("\n" + "="*80)
        print("‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
        print(f"‚è∞ Tiempo de ejecuci√≥n: {execution_time}")
        print(f"üìÅ Logs guardados en: {evaluation_logger.logs_dir}")
        print(f"üìÑ Resultados guardados en: {filename}")
        print("üìß Resultados enviados por email")
        print("="*80)
        
        return result
        
    except KeyboardInterrupt:
        evaluation_logger.log_error("Proceso Principal", "Proceso interrumpido por el usuario")
        print("\n‚ùå Proceso interrumpido por el usuario")
        
    except Exception as e:
        end_time = datetime.now()
        execution_time = end_time - start_time
        
        evaluation_logger.log_error("Proceso Principal", f"Error cr√≠tico: {str(e)}")
        evaluation_logger.logger.error("="*80)
        evaluation_logger.logger.error("‚ùå PROCESO FALLIDO")
        evaluation_logger.logger.error(f"‚è∞ Tiempo antes del fallo: {execution_time}")
        evaluation_logger.logger.error(f"üîç Error: {str(e)}")
        evaluation_logger.logger.error("="*80)
        
        print(f"\n‚ùå Error cr√≠tico: {str(e)}")
        print(f"üìÅ Logs con detalles del error en: {evaluation_logger.logs_dir}")
        raise

if __name__ == "__main__":
    main()